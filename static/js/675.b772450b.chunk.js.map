{"version":3,"file":"static/js/675.b772450b.chunk.js","mappings":"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","sources":["webpack://harry-potter-social-network/./src/components/Users/Users.module.css?b9d0","components/Users/User/User.tsx","webpack://harry-potter-social-network/./src/components/UI/Pagination/Pagination.module.css?c109","components/UI/Pagination/Pagination.tsx","redux/usersSelectors.ts","components/Users/UsersSearchForm.tsx","components/Users/UsersPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"users\":\"Users_users__QPuRC\",\"user\":\"Users_user__trAiR\",\"avatarBlock\":\"Users_avatarBlock__0DGMf\",\"profile\":\"Users_profile__FXaoJ\",\"description\":\"Users_description__sGAYm\"};","import React from 'react';\nimport s from '../Users.module.css'\nimport userBaseImage from '../../../images/userBaseImage.jpg'\nimport {Link} from \"react-router-dom\";\nimport {UserType} from \"../../../types/types\";\n\ntype PropsType = {\n    user: UserType\n    follow: (id: number) => void\n    unfollow: (id: number) => void\n    followingInProgress: Array<number>\n}\nconst User: React.FC<PropsType> = (props) => {\n    const onFollowClick = () => {\n        props.follow(props.user.id)\n    }\n    const onUnfollowClick = () => {\n        props.unfollow(props.user.id)\n    }\n    return (\n        <div className={s.user}>\n            <div className={s.profile}>\n                <div className={s.avatarBlock}>\n                    <Link to={`/profile/${props.user.id}`}>\n                        <img src={props.user.photos.small ? props.user.photos.small : userBaseImage}\n                             alt=\"userImage\"/>\n                    </Link>\n                </div>\n                <div>\n                    <button disabled={props.followingInProgress.some(id => id === props.user.id)}\n                            onClick={props.user.followed ? onUnfollowClick : onFollowClick}>\n                        {props.user.followed ? 'Unfollow' : 'Follow'}\n                    </button>\n                </div>\n            </div>\n            <div className={s.description}>\n\n                <div>{props.user.name}</div>\n                <div>{props.user.status ? props.user.status : 'Support Ukraine'}</div>\n                <div className={s.country}>{'props.location.country'}</div>\n                <div className={s.city}>{'props.location.city'}</div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default User;\n","// extracted by mini-css-extract-plugin\nexport default {\"pagination\":\"Pagination_pagination__L4RR7\",\"pageNumber\":\"Pagination_pageNumber__V2ANc\",\"pageNumber_selected\":\"Pagination_pageNumber_selected__mgVXW\",\"arrowButton\":\"Pagination_arrowButton__zxfh+\",\"arrowButton_hidden\":\"Pagination_arrowButton_hidden__t09if\",\"arrow\":\"Pagination_arrow__OzC4P\",\"arrow_left\":\"Pagination_arrow_left__L3M7l\",\"arrow_right\":\"Pagination_arrow_right__1ZBJO\"};","import React from 'react';\nimport s from './Pagination.module.css'\nimport classNames from \"classnames\";\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    activePage: number\n    onPageClick: (pageNumber: number) => void\n    portionSize: number\n}\nconst Pagination: React.FC<PropsType> = ({\n                                             totalItemsCount,\n                                             pageSize,\n                                             activePage = 1,\n                                             onPageClick,\n                                             portionSize = 5\n                                         }) => {\n\n    const pagesCount: number = Math.ceil(totalItemsCount / pageSize)\n    const pages: Array<number> = []\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n    let slicedPages: Array<number>\n    if (pagesCount <= portionSize) {\n        slicedPages = pages.slice(0, portionSize)\n    } else if (activePage < Math.floor(portionSize / 2) + 1) {\n        slicedPages = pages.slice(0, portionSize)\n    } else if (pagesCount - activePage < Math.ceil(portionSize / 2)) {\n        slicedPages = pages.slice(pagesCount - portionSize, pagesCount)\n    } else {\n        slicedPages = pages.slice(activePage - Math.floor(portionSize / 2) - 1, activePage + Math.ceil(portionSize / 2) - 1)\n    }\n    if (!totalItemsCount) return <div>Нікого не знайдено</div>\n    return (\n        <div className={s.pagination}>\n\n            <button onClick={() => onPageClick(activePage - 1)}\n                    className={classNames({[s.arrowButton_hidden]: activePage === 1}, s.arrowButton)}>\n                <i className={`${s.arrow} ${s.arrow_left}`}></i>\n            </button>\n            {\n                slicedPages.map(p => <span onClick={() => onPageClick(p)}\n                                           className={classNames(s.pageNumber, {\n                                               [s.pageNumber_selected]: activePage === p\n                                           })} key={p}>{p}</span>)\n            }\n            <button onClick={() => onPageClick(activePage + 1)}\n                    className={classNames({[s.arrowButton_hidden]: activePage === pagesCount}, s.arrowButton)}>\n                <i className={`${s.arrow} ${s.arrow_right}`}></i>\n            </button>\n        </div>\n    )\n}\nexport default Pagination;\n","import {createSelector} from \"reselect\";\nimport {AppStateType} from \"./reduxStore\";\n\nconst getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users\n}\n\nexport const getUsers = createSelector(getUsersSelector, (users) => {\n    return users.filter(u => u) //Фільтр лише для прикладу, аби показати, що компонента усе одно лишній\n    // раз не рендериться, адже реселект звіряє вхідні дані, чи вони не змінилися. І якщо змінилися, то\n    // тільки тоді викликає колбек функцію з логікою\n})\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount\n}\n\nexport const getActivePage = (state: AppStateType) => {\n    return state.usersPage.activePage\n}\n\nexport const getIsLoading = (state: AppStateType) => {\n    return state.usersPage.isLoading\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress\n}\n\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter\n}\n","import React from \"react\";\nimport {Field, Form, Formik} from \"formik\";\nimport {FilterType} from \"../../redux/usersReducer\";\nimport {useAppSelector} from \"../../redux/reduxStore\";\nimport {getUsersFilter} from \"../../redux/usersSelectors\";\n\nconst usersSearchFormValidate = (values: any) => {\n    const errors: any = {};\n    return errors;\n}\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\ntype FriendFormType = 'true' | 'false' | 'null';\ntype ValuesType = {\n    term: string\n    friend: FriendFormType\n}\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n    const filter = useAppSelector(getUsersFilter)\n    const submit = (values: ValuesType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true'\n        }\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return (\n        <div>\n            <Formik\n                enableReinitialize\n                initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\n                validate={usersSearchFormValidate}\n                onSubmit={submit}\n            >\n                {({isSubmitting}) => (\n                    <Form>\n                        <Field type=\"text\" name=\"term\"/>\n                        <Field name=\"friend\" as=\"select\" className=\"my-select\">\n                            <option value=\"null\">All users</option>\n                            <option value=\"true\">Only followed users</option>\n                            <option value=\"false\">Only unfollowed users</option>\n                        </Field>\n                        <button type=\"submit\" disabled={isSubmitting}>\n                            Find\n                        </button>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    )\n})\n","import React, {useEffect} from 'react';\nimport s from './Users.module.css'\nimport User from \"./User/User\";\nimport Preloader from \"../UI/Preloader/Preloader\";\nimport Pagination from \"../UI/Pagination/Pagination\";\nimport {UsersSearchForm} from \"./UsersSearchForm\";\nimport {FilterType, follow, requestUsers, unfollow} from \"../../redux/usersReducer\";\nimport {\n    getActivePage,\n    getFollowingInProgress,\n    getIsLoading,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers,\n    getUsersFilter\n} from \"../../redux/usersSelectors\";\nimport {useAppDispatch, useAppSelector} from \"../../redux/reduxStore\";\nimport {useLocation, useNavigate} from \"react-router-dom\";\nimport queryString from \"query-string\";\n\ntype QueryParamsType = { term?: string, page?: string, friend?: string }\nexport const UsersPage: React.FC = () => {\n    const users = useAppSelector(getUsers)\n    const pageSize = useAppSelector(getPageSize)\n    const totalUsersCount = useAppSelector(getTotalUsersCount)\n    const activePage = useAppSelector(getActivePage)\n    const isLoading = useAppSelector(getIsLoading)\n    const filter = useAppSelector(getUsersFilter)\n    const followingInProgress = useAppSelector(getFollowingInProgress)\n\n    const dispatch = useAppDispatch()\n    const navigate = useNavigate()\n    const location = useLocation()\n\n\n    useEffect(() => {\n        const parsed = queryString.parse(location.search) as QueryParamsType\n\n        let actualPage = activePage\n        let actualFilter = filter\n        if (parsed.page) actualPage = Number(parsed.page)\n        if (parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n        if (parsed.friend) {\n            actualFilter = {\n                ...actualFilter,\n                friend: parsed.friend === 'null' ? null : parsed.friend === 'true'\n            }\n        }\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\n    }, [])\n    useEffect(() => {\n        const query: QueryParamsType = {}\n        if (filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (activePage !== 1) query.page = String(activePage)\n\n        navigate({\n            pathname: '/users',\n            search: queryString.stringify(query)\n        })\n    }, [filter, activePage])\n\n\n    const onPageClick = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n    const followWrapper = (userId: number) => {\n        dispatch(follow(userId))\n    }\n    const unfollowWrapper = (userId: number) => {\n        dispatch(unfollow(userId))\n    }\n\n    return (\n        <section className={s.users}>\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\n            <Pagination totalItemsCount={totalUsersCount} pageSize={pageSize}\n                        activePage={activePage} onPageClick={onPageClick} portionSize={5}/>\n            {isLoading\n                ? <Preloader/>\n                : users.map(u => <User key={u.id} user={u}\n                                       follow={followWrapper} unfollow={unfollowWrapper}\n                                       followingInProgress={followingInProgress}/>)\n\n            }\n        </section>\n    )\n}\n"],"names":["props","className","s","to","user","id","src","photos","small","userBaseImage","alt","disabled","followingInProgress","some","onClick","followed","unfollow","follow","name","status","slicedPages","totalItemsCount","pageSize","activePage","onPageClick","portionSize","pagesCount","Math","ceil","pages","i","push","floor","slice","classNames","map","p","getUsers","createSelector","state","usersPage","users","filter","u","getPageSize","getTotalUsersCount","totalUsersCount","getActivePage","getIsLoading","isLoading","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","values","UsersSearchForm","React","useAppSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","type","as","value","UsersPage","dispatch","useAppDispatch","navigate","useNavigate","location","useLocation","useEffect","parsed","queryString","search","actualPage","actualFilter","page","Number","requestUsers","query","pathname","followWrapper","userId","unfollowWrapper","pageNumber","Preloader"],"sourceRoot":""}