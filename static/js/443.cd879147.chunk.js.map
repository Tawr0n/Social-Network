{"version":3,"file":"static/js/443.cd879147.chunk.js","mappings":"mNACA,G,QAAA,CAAgB,QAAU,0BAA0B,QAAU,0BAA0B,OAAS,yBAAyB,cAAgB,gCAAgC,OAAS,yBAAyB,KAAO,uBAAuB,KAAO,uBAAuB,KAAO,uBAAuB,KAAO,uBAAuB,QAAU,0BAA0B,WAAa,6BAA6B,YAAc,8BAA8B,aAAe,iC,mBCKvcA,EAAW,gBAAEA,EAAQ,EAARA,SAAQ,OAAoBA,EAAWC,EAAAA,cAAkBA,EAAAA,MAAQ,EAkBpF,EAb8B,SAACC,GAC3B,OACI,UAAC,KAAO,CAACC,UAAWH,EAAUI,GAAE,oBAAeF,EAAMG,OAAOC,IAAK,WAC7D,gBAAKH,UAAWF,EAAAA,OAAS,UACrB,gBAAKM,IAAKL,EAAMG,OAAOG,MAAOC,IAAI,QAEtC,iBAAKN,UAAWF,EAAAA,KAAO,WACnB,eAAIE,UAAWF,EAAAA,KAAO,SAAEC,EAAMG,OAAOK,QACrC,gBAAKP,UAAWF,EAAAA,KAAO,SAAEC,EAAMG,OAAOM,YAGtD,ECXA,EAJ+B,SAAH,GAAmB,IAAdC,EAAO,EAAPA,QAC7B,OAAQ,gBAAKT,UAAWF,EAAAA,QAAU,SAAEW,EAAQA,SAChD,E,uCCoBMC,GAAgCC,EAAAA,EAAAA,GAAiB,IAWjDC,GAAuBC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,UAArCD,EAV4C,SAACd,GACtE,OACI,kBAAMgB,SAAUhB,EAAMiB,aAAchB,UAAWF,EAAAA,WAAa,WACxD,SAACmB,EAAA,EAAK,CAACC,SAAU,CAACC,EAAAA,EAAUT,GAAYH,KAAM,iBAAkBP,UAAWF,EAAAA,YACpEsB,YAAa,+HACbC,UAAWC,EAAAA,EAAaC,UAAW,cAC1C,mBAAQvB,UAAWF,EAAAA,aAAe,SAAC,6DAG/C,IAGA,EAhCwC,SAAH,GAA0C,IAArC0B,EAAQ,EAARA,SAAUC,EAAO,EAAPA,QAASC,EAAW,EAAXA,YAMzD,OACI,qBAAS1B,UAAWF,EAAAA,QAAU,WAC1B,gBAAKE,UAAWF,EAAAA,QAAU,SACrB2B,EAAQE,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAM,CAAC1B,OAAQ0B,GAAQA,EAAEzB,GAAK,OAErD,iBAAKH,UAAWF,EAAAA,KAAO,WACnB,gBAAKE,UAAWF,EAAAA,SAAW,SACtB0B,EAASG,KAAI,SAAAE,GAAC,OAAI,SAAC,EAAO,CAACpB,QAASoB,GAAQA,EAAE1B,GAAK,OAExD,SAACS,EAAoB,CAACG,SAbZ,SAACe,GACnBJ,EAAYI,EAASC,eACzB,SAcJ,E,oBCnBMC,EAAkB,SAACC,GAAmB,MAAmB,CAC3DC,OAAQD,EAAME,KAAKD,OACtB,EAWD,MATA,SAAqDE,GAMjD,OAAOC,EAAAA,EAAAA,IAA8CL,EAA9CK,EAL0C,SAACtC,GAC9C,OAAKA,EAAMmC,QACJ,SAACE,GAAS,UAAKrC,KADI,SAAC,KAAQ,CAACE,GAAG,UAE3C,GAGJ,ECIA,GAAeqC,E,QAAAA,IACXC,GACAF,EAAAA,EAAAA,KAPoB,SAACJ,GAAmB,MAAmB,CAC3DT,SAAUS,EAAMO,aAAahB,SAC7BC,QAASQ,EAAMO,aAAaf,QAC/B,IAIiF,UACvEgB,EAAAA,IAHX,CAKEC,E","sources":["webpack://harry-potter-social-network/./src/components/Messages/Messages.module.css?8e7e","components/Messages/Dialog/Dialog.tsx","components/Messages/Message/Message.tsx","components/Messages/Messages.tsx","hoc/withAuthRedirect.tsx","components/Messages/MessagesContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Messages_section__d03zV\",\"dialogs\":\"Messages_dialogs__ZLADw\",\"dialog\":\"Messages_dialog__9OHBB\",\"dialog_active\":\"Messages_dialog_active__LYQCT\",\"avatar\":\"Messages_avatar__oEJPD\",\"info\":\"Messages_info__E4bbX\",\"name\":\"Messages_name__6LjHG\",\"text\":\"Messages_text__MfJ54\",\"chat\":\"Messages_chat__JKS0q\",\"message\":\"Messages_message__rS6lN\",\"chat__form\":\"Messages_chat__form__U+Wph\",\"chat__input\":\"Messages_chat__input__4PDjJ\",\"chat__button\":\"Messages_chat__button__06yEp\"};","import React, {FC} from 'react';\nimport s from '../Messages.module.css'\nimport {NavLink} from \"react-router-dom\";\nimport {DialogType, IsActiveType} from \"../../../types/types\";\n\n\nconst isActive = ({isActive}: IsActiveType) => isActive ? s.dialog_active : s.dialog\n\ntype PropsType = {\n    dialog: DialogType\n}\nconst Dialog: FC<PropsType> = (props) => {\n    return (\n        <NavLink className={isActive} to={`/messages/${props.dialog.id}`}>\n            <div className={s.avatar}>\n                <img src={props.dialog.image} alt=\"\"/>\n            </div>\n            <div className={s.info}>\n                <h3 className={s.name}>{props.dialog.name}</h3>\n                <div className={s.text}>{props.dialog.text}</div>\n            </div>\n        </NavLink>);\n};\n\nexport default Dialog;\n","import React, {FC} from 'react';\nimport s from '../Messages.module.css'\nimport {MessageType} from \"../../../types/types\";\n\ntype PropsType = {\n    message: MessageType\n}\nconst Message: FC<PropsType> = ({message}) => {\n    return (<div className={s.message}>{message.message}</div>)\n}\n\nexport default Message;\n","import React, {FC} from 'react';\nimport s from './Messages.module.css'\nimport Dialog from \"./Dialog/Dialog\";\nimport Message from \"./Message/Message\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {CustomField} from \"../UI/FormsControls/FormsControls\";\nimport {FieldValidatorType, maxLengthCreator, required} from \"../../validators/validators\";\nimport {MessagesPropsType} from \"./MessagesContainer\";\n\ntype NewMessageFormType = { newMessageText: string }\nconst Messages: FC<MessagesPropsType> = ({messages, dialogs, sendMessage}) => {\n\n    const addNewMessage = (formData: NewMessageFormType) => {\n        sendMessage(formData.newMessageText)\n    }\n\n    return (\n        <section className={s.section}>\n            <div className={s.dialogs}>\n                {dialogs.map(d => <Dialog dialog={d} key={d.id}/>)}\n            </div>\n            <div className={s.chat}>\n                <div className={s.messages}>\n                    {messages.map(m => <Message message={m} key={m.id}/>)}\n                </div>\n                <SendMessageReduxForm onSubmit={addNewMessage}/>\n            </div>\n        </section>);\n};\nconst maxLength: FieldValidatorType = maxLengthCreator(10)\nconst SendMessageForm: React.FC<InjectedFormProps<NewMessageFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit} className={s.chat__form}>\n            <Field validate={[required, maxLength]} name={'newMessageText'} className={s.chat__input}\n                   placeholder={'Написати повідомлення...'}\n                   component={CustomField} FieldType={'textarea'}/>\n            <button className={s.chat__button}>Надіслати</button>\n        </form>\n    )\n}\nconst SendMessageReduxForm = reduxForm<NewMessageFormType>({form: 'dialog'})(SendMessageForm)\n\nexport default Messages;\n","import React from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\n\r\ntype TStateProps = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): TStateProps => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nfunction withAuthRedirect<Props extends TStateProps>(Component: React.ComponentType<Props>) {\r\n    const RedirectComponent: React.FC<TStateProps> = (props) => {\r\n        if (!props.isAuth) return <Navigate to='/login'/>\r\n        return <Component {...props as Props}/>\r\n    };\r\n\r\n    return connect<TStateProps, {}, Props, AppStateType>(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\nexport default withAuthRedirect;\r\n","import {actions} from \"../../redux/messagesReducer\";\nimport Messages from \"./Messages\";\nimport {connect} from \"react-redux\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {DialogType, MessageType} from \"../../types/types\";\nimport {AppStateType} from \"../../redux/reduxStore\";\nimport React from \"react\";\n\n\ntype TStateProps = {\n    messages: Array<MessageType>\n    dialogs: Array<DialogType>\n}\ntype TDispatchProps = {\n    sendMessage: (newMessageText: string) => void\n}\ntype TOwnProps = {}\nexport type MessagesPropsType = TStateProps & TDispatchProps & TOwnProps\nconst mapStateToProps = (state: AppStateType): TStateProps => ({\n    messages: state.messagesPage.messages,\n    dialogs: state.messagesPage.dialogs\n})\n\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n    connect<TStateProps, TDispatchProps, TOwnProps, AppStateType>(mapStateToProps, {\n        ...actions\n    })\n)(Messages);\n"],"names":["isActive","s","props","className","to","dialog","id","src","image","alt","name","text","message","maxLength","maxLengthCreator","SendMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","validate","required","placeholder","component","CustomField","FieldType","messages","dialogs","sendMessage","map","d","m","formData","newMessageText","mapStateToProps","state","isAuth","auth","Component","connect","compose","withAuthRedirect","messagesPage","actions","Messages"],"sourceRoot":""}